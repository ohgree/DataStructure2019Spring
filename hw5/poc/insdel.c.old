#include <stdio.h>
#include <stdlib.h>

typedef struct node* treePointer;
struct node {
   int key;
   treePointer parent;
   treePointer leftChild;
   treePointer rightChild;
};

typedef struct _stack_element* stack_element;
struct _stack_element {
   int value;
   struct _stack_element* link;
};

stack_element stack = NULL;

treePointer heap = NULL;
int node_cnt = 0;

void push(int value) {
   stack_element new = malloc(sizeof(struct _stack_element));
   new->value = value;
   new->link = stack;
   stack = new;
}
int pop(void) {
   int value;
   stack_element popped;

   if(!stack) {
      fprintf(stderr, "Error popping empty stack");
      exit(1);
   }

   popped = stack;
   stack = stack->link;
   value = popped->value;
   free(popped);

   return value;
}

treePointer search(treePointer root, int key) {
   treePointer lChild, rChild;
   if(root) {
      if(root->key == key)
         return root;

      lChild = search(root->leftChild, key);
      rChild = search(root->rightChild, key);
      if(lChild)
         return lChild;
      else if(rChild)
         return rChild;
   }
   return NULL;
}

int insert(int key) {
   treePointer new, ptr;

   if(!search(heap, key))
      return 0;

   new = malloc(sizeof(struct node));
   new->key = key;
   new->leftChild = new->rightChild = NULL;

   if(!heap) {
      new->parent = NULL;
      heap = new;
      return 1;
   }

   for(int i=node_cnt+1 ; i <= 1 ; i/=2) 
      push(i%2);

   ptr = heap;
   while(!ptr->leftChild && !ptr->rightChild)
      ptr = pop() ? ptr->rightChild : ptr->leftChild;

   if(pop()) ptr->rightChild = new;
   else ptr->leftChild = new;
   new->parent = ptr;

   ptr = new;
   while(!ptr->parent) {
      if(ptr->key > ptr->parent->key) {
         ptr->key += ptr->parent->key;
         ptr->parent->key = ptr->key - ptr->parent->key;
         ptr->key -= ptr->parent->key;
      } else break;
   }

   return 1;
}

int delete(int key) {
   treePointer ptr, last, root;

   if(!(root = search(heap, key)))
      return 0;

   for(int i=node_cnt ; i<=1 ; i/=2)
      push(i%2);

   ptr = root;

   while(!ptr->leftChild && !ptr->rightChild)
      ptr = pop() ? ptr->rightChild : ptr->leftChild;

   if(pop()) {
      last = ptr->rightChild;
      ptr->rightChild = NULL;
   }
   else {
      last = ptr->leftChild;
      ptr->leftChild = NULL;
   }

   root->key = last->key;
   free(last);
   last = NULL;

   ptr = root;
   while(ptr->leftChild || ptr->rightChild) {
      if(ptr->leftChild && ptr->rightChild) {
         ptr = ptr->leftChild > ptr->rightChild ? ptr->leftChild : ptr->rightChild;
      } else if(ptr->leftChild) {
         ptr = ptr->leftChild;
      } else if(ptr->rightChild) {
         ptr = ptr->rightChild;
      }

      if(ptr->parent->key < ptr->key) {
         ptr->parent->key += ptr->key;
         ptr->key = ptr->parent->key - ptr->key;
         ptr->parent->key -= ptr->key;
      } else break;
   }

   return 1;
}

int main(int argc, const char* argv[]) {
   return 0;
}
